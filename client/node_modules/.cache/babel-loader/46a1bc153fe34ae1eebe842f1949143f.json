{"ast":null,"code":"'use strict';\n\nvar R = require('ramda');\n\nvar request = require('request');\n\nvar pjson = require('../package.json');\n\nvar PlaidError = require('./PlaidError');\n\nvar wrapPromise = require('./wrapPromise'); // Max timeout of ten minutes\n\n\nvar DEFAULT_TIMEOUT_IN_MILLIS = 10 * 60 * 1000;\n\nvar handleApiResponse = function (resolve, reject, err, res, $body, isMfa) {\n  if (res != null && R.type($body) === 'Object') {\n    $body.status_code = res.statusCode;\n  } // network / usage errors\n\n\n  if (err != null) {\n    return reject(err); // success response (MFA)\n  } else if (isMfa && res.statusCode === 200) {\n    return resolve([null, $body]); // mfa response (MFA)\n  } else if (isMfa && res.statusCode === 210) {\n    return resolve([$body, null]); // success response (non mfa)\n  } else if (res.statusCode === 200) {\n    // extract request id from header for binary data,\n    // i.e. mime type application/*\n    if (res.headers['plaid-request-id'] != null && res.headers['content-type'] != null && res.headers['content-type'].indexOf('application') === 0) {\n      return resolve({\n        request_id: res.headers['plaid-request-id'],\n        buffer: $body\n      });\n    }\n\n    return resolve($body); // plaid error\n  } else if (R.type($body) === 'Object') {\n    return reject(new PlaidError($body)); // Unknown body type returned, return a standard API_ERROR\n  } else {\n    return reject(new PlaidError({\n      error_type: 'API_ERROR',\n      status_code: res.statusCode,\n      error_code: 'INTERNAL_SERVER_ERROR',\n      error_message: String($body),\n      display_message: null,\n      request_id: null\n    }));\n  }\n};\n\nvar plaidRequest = function (context, requestSpec, clientRequestOptions, cb) {\n  var uri = context.env + requestSpec.path;\n  var method = 'POST';\n  var requestJSON = R.merge(R.dissoc('env', context), requestSpec.body);\n  var headers = {\n    'User-Agent': 'Plaid Node v' + pjson.version\n  };\n\n  if (clientRequestOptions.version != null) {\n    headers['Plaid-Version'] = clientRequestOptions.version;\n  }\n\n  if (clientRequestOptions.clientApp != null) {\n    headers['Plaid-Client-App'] = clientRequestOptions.clientApp;\n  } // merge the default request options with the client specified options,\n  // this allows for clients to supply extra options to the request function\n\n\n  var requestOptions = R.merge({\n    uri: uri,\n    method: method,\n    json: requestJSON,\n    headers: headers,\n    timeout: DEFAULT_TIMEOUT_IN_MILLIS,\n    encoding: requestSpec.binary ? null : 'utf8'\n  }, clientRequestOptions);\n  return wrapPromise(new Promise(function (resolve, reject) {\n    request(requestOptions, function (err, res, body) {\n      handleApiResponse(resolve, reject, err, res, body, requestSpec.includeMfaResponse);\n    });\n  }), cb);\n};\n\nmodule.exports = plaidRequest;","map":null,"metadata":{},"sourceType":"script"}