{"ast":null,"code":"'use strict';\n\nvar P = require('bluebird');\n\nvar R = require('ramda');\n\nvar plaidEnvironments = require('./plaidEnvironments');\n\nvar plaidRequest = require('./plaidRequest');\n\nvar wrapPromise = require('./wrapPromise'); // Default version of Plaid API, if not specified by the client.\n\n\nconst DEFAULT_VERSION = '2019-05-29'; // Client(String, String, String, String, Object?)\n\nfunction Client(client_id, secret, public_key, env, options) {\n  if (R.isNil(client_id)) {\n    throw new Error('Missing Plaid \"client_id\"');\n  }\n\n  if (R.isNil(secret)) {\n    throw new Error('Missing Plaid \"secret\"');\n  }\n\n  if (R.isNil(public_key)) {\n    throw new Error('Missing Plaid \"public_key\"');\n  }\n\n  if (!R.any(R.equals(env), R.values(plaidEnvironments))) {\n    throw new Error('Invalid Plaid environment');\n  }\n\n  this.client_id = client_id;\n  this.secret = secret;\n  this.env = env;\n  this.public_key = public_key;\n\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.version == null) {\n    options.version = DEFAULT_VERSION;\n  }\n\n  this.client_request_opts = options;\n} // Private\n\n\nvar requestWithAccessToken = function (path) {\n  return function (access_token, options, cb) {\n    return this._authenticatedRequest({\n      path: path,\n      body: {\n        access_token: access_token\n      }\n    }, options, cb);\n  };\n};\n\nClient.prototype._authenticatedRequest = function _authenticatedRequest(requestSpec, options, cb, withPublicKey) {\n  // juggle arguments\n  if (typeof options === 'function') {\n    cb = options;\n    options = {};\n  } else {\n    requestSpec.body.options = options;\n  }\n\n  var context = R.merge({\n    env: this.env\n  }, withPublicKey ? {\n    public_key: this.public_key\n  } : {\n    client_id: this.client_id,\n    secret: this.secret\n  });\n  return plaidRequest(context, requestSpec, this.client_request_opts, cb);\n}; // createPublicToken(String, Function)\n\n\nClient.prototype.createPublicToken = requestWithAccessToken('/item/public_token/create', false); // exchangePublicToken(String, Function)\n\nClient.prototype.exchangePublicToken = function (public_token, cb) {\n  return this._authenticatedRequest({\n    path: '/item/public_token/exchange',\n    body: {\n      public_token: public_token\n    }\n  }, cb);\n}; // updateAccessTokenVersion(String, Function)\n\n\nClient.prototype.updateAccessTokenVersion = function (legacy_access_token, cb) {\n  return this._authenticatedRequest({\n    path: '/item/access_token/update_version',\n    body: {\n      access_token_v1: legacy_access_token\n    }\n  }, cb);\n}; // updateItemWebhook(String, String, Function)\n\n\nClient.prototype.updateItemWebhook = function (access_token, webhook, cb) {\n  return this._authenticatedRequest({\n    path: '/item/webhook/update',\n    body: {\n      access_token: access_token,\n      webhook: webhook\n    }\n  }, cb);\n}; // createProcessorToken(String, String, String, Function)\n\n\nClient.prototype.createProcessorToken = function (access_token, account_id, processor, cb) {\n  var endpoint = processor === 'stripe' ? '/processor/stripe/bank_account_token/create' : '/processor/' + processor + '/processor_token/create';\n  return this._authenticatedRequest({\n    path: endpoint,\n    body: {\n      access_token: access_token,\n      account_id: account_id\n    }\n  }, cb);\n};\n\nClient.prototype.createStripeToken = function (access_token, account_id, cb) {\n  return this.createProcessorToken(access_token, account_id, 'stripe', cb);\n}; // invalidateAccessToken(String, Function)\n\n\nClient.prototype.invalidateAccessToken = requestWithAccessToken('/item/access_token/invalidate'); // removeItem(String, Function)\n\nClient.prototype.removeItem = requestWithAccessToken('/item/remove'); // getItem(String, Function)\n\nClient.prototype.getItem = requestWithAccessToken('/item/get'); // getAccounts(String, Object?, Function)\n\nClient.prototype.getAccounts = requestWithAccessToken('/accounts/get'); // getBalance(String, Object?, Function)\n\nClient.prototype.getBalance = requestWithAccessToken('/accounts/balance/get'); // getAuth(String, Object?, Function)\n\nClient.prototype.getAuth = requestWithAccessToken('/auth/get'); // getIncome(String, Function)\n// getIdentity(String, Function)\n\nClient.prototype.getIdentity = requestWithAccessToken('/identity/get'); // getIncome(String, Function)\n\nClient.prototype.getIncome = requestWithAccessToken('/income/get'); // getTransactions(String, Date, Date, Object?, Function)\n\nClient.prototype.getTransactions = function (access_token, start_date, end_date, options, cb) {\n  return this._authenticatedRequest({\n    path: '/transactions/get',\n    body: {\n      access_token: access_token,\n      start_date: start_date,\n      end_date: end_date\n    }\n  }, options, cb);\n}; // getAllTransactions(String, Date, Date, Object?, Function)\n\n\nClient.prototype.getAllTransactions = function (access_token, start_date, end_date, options, cb) {\n  // juggle arguments\n  if (typeof options === 'function') {\n    cb = options;\n    options = {};\n  } else {\n    options = R.defaultTo({}, options);\n  }\n\n  var self = this;\n  return wrapPromise(P.coroutine(function* () {\n    var transactions = [];\n    var transactionsCount = 0;\n    var response = {};\n\n    while (true) {\n      const transactionsResponse = yield self.getTransactions(access_token, start_date, end_date, R.merge(options, {\n        count: 500,\n        // largest allowed value\n        offset: transactions.length\n      }));\n      response.accounts = transactionsResponse.accounts;\n      response.item = transactionsResponse.item;\n\n      if (transactionsResponse.transactions != null) {\n        transactions = R.concat(transactions, transactionsResponse.transactions);\n        transactionsCount += transactionsResponse.transactions.length;\n      }\n\n      if (transactionsCount >= transactionsResponse.total_transactions) {\n        break;\n      }\n    }\n\n    response.total_transactions = transactionsCount;\n    response.transactions = transactions;\n    return response;\n  })(), cb, {\n    no_spread: true\n  });\n}; // getCreditDetails(String, Function)\n\n\nClient.prototype.getCreditDetails = requestWithAccessToken('/credit_details/get'); // getHoldings(String, Function)\n\nClient.prototype.getHoldings = requestWithAccessToken('/investments/holdings/get'); // getInvestmentTransactions(String, Date, Date, Object?, Function)\n\nClient.prototype.getInvestmentTransactions = function (access_token, start_date, end_date, options, cb) {\n  return this._authenticatedRequest({\n    path: '/investments/transactions/get',\n    body: {\n      access_token: access_token,\n      start_date: start_date,\n      end_date: end_date\n    }\n  }, options, cb);\n}; // getLiabilities(String, Function)\n\n\nClient.prototype.getLiabilities = requestWithAccessToken('/liabilities/get'); // createAssetReport([String], Number, Object, Function)\n\nClient.prototype.createAssetReport = function (access_tokens, days_requested, options, cb) {\n  return this._authenticatedRequest({\n    path: '/asset_report/create',\n    body: {\n      access_tokens: access_tokens,\n      days_requested: days_requested\n    }\n  }, options, cb);\n}; // filterAssetReport(String, [String], Function)\n\n\nClient.prototype.filterAssetReport = function (asset_report_token, account_ids_to_exclude, cb) {\n  return this._authenticatedRequest({\n    path: '/asset_report/filter',\n    body: {\n      asset_report_token: asset_report_token,\n      account_ids_to_exclude: account_ids_to_exclude\n    }\n  }, cb);\n}; // refreshAssetReport(String, Number, Object?, Function)\n\n\nClient.prototype.refreshAssetReport = function (asset_report_token, days_requested, options, cb) {\n  return this._authenticatedRequest({\n    path: '/asset_report/refresh',\n    body: {\n      asset_report_token: asset_report_token,\n      days_requested: days_requested\n    }\n  }, options, cb);\n}; // getAssetReport(String, Boolean, Function)\n\n\nClient.prototype.getAssetReport = function (asset_report_token, include_insights, cb) {\n  return this._authenticatedRequest({\n    path: '/asset_report/get',\n    body: {\n      asset_report_token: asset_report_token,\n      include_insights: include_insights\n    }\n  }, cb);\n}; // getAssetReportPdf(String, Function)\n\n\nClient.prototype.getAssetReportPdf = function (asset_report_token, cb) {\n  return this._authenticatedRequest({\n    path: '/asset_report/pdf/get',\n    body: {\n      asset_report_token: asset_report_token\n    },\n    binary: true\n  }, cb);\n}; // createAuditCopy(String, String, Function)\n\n\nClient.prototype.createAuditCopy = function (asset_report_token, auditor_id, cb) {\n  return this._authenticatedRequest({\n    path: '/asset_report/audit_copy/create',\n    body: {\n      asset_report_token: asset_report_token,\n      auditor_id: auditor_id\n    }\n  }, cb);\n}; // getAuditCopy(String, Function)\n\n\nClient.prototype.getAuditCopy = function (audit_copy_token, cb) {\n  return this._authenticatedRequest({\n    path: '/asset_report/audit_copy/get',\n    body: {\n      audit_copy_token: audit_copy_token\n    }\n  }, cb);\n}; // removeAuditCopy(String, Function)\n\n\nClient.prototype.removeAuditCopy = function (audit_copy_token, cb) {\n  return this._authenticatedRequest({\n    path: '/asset_report/audit_copy/remove',\n    body: {\n      audit_copy_token: audit_copy_token\n    }\n  }, cb);\n}; // removeAssetReport(String, Function)\n\n\nClient.prototype.removeAssetReport = function (asset_report_token, cb) {\n  return this._authenticatedRequest({\n    path: '/asset_report/remove',\n    body: {\n      asset_report_token: asset_report_token\n    }\n  }, cb);\n}; // getInstitutions(Number, Number, Function);\n\n\nClient.prototype.getInstitutions = function (count, offset, options, cb) {\n  return this._authenticatedRequest({\n    path: '/institutions/get',\n    body: {\n      count: count,\n      offset: offset\n    }\n  }, options, cb);\n}; // getInstitutionById(String, Object?, Function);\n\n\nClient.prototype.getInstitutionById = function (institution_id, options, cb) {\n  return this._authenticatedRequest({\n    path: '/institutions/get_by_id',\n    body: {\n      institution_id: institution_id\n    }\n  }, options, cb, true);\n}; // searchInstitutionsByName(String, [String], Object?, Function)\n\n\nClient.prototype.searchInstitutionsByName = function (query, products, options, cb) {\n  return this._authenticatedRequest({\n    path: '/institutions/search',\n    body: {\n      query: query,\n      products: products\n    }\n  }, options, cb, true);\n}; // getCategories(Function)\n\n\nClient.prototype.getCategories = function (cb) {\n  return plaidRequest({\n    env: this.env\n  }, {\n    path: '/categories/get'\n  }, this.client_request_opts, cb);\n}; // resetLogin(String, Function) - sandbox only\n\n\nClient.prototype.resetLogin = requestWithAccessToken('/sandbox/item/reset_login'); // sandboxPublicTokenCreate(String, Array, Object?, Function) - sandbox only\n\nClient.prototype.sandboxPublicTokenCreate = function (institution_id, initial_products, options, cb) {\n  return this._authenticatedRequest({\n    path: '/sandbox/public_token/create',\n    body: {\n      institution_id: institution_id,\n      initial_products: initial_products\n    }\n  }, options, cb, true);\n}; // sandboxItemFireWebhook(String, String, Function) - sandbox only\n\n\nClient.prototype.sandboxItemFireWebhook = function (access_token, webhook_code, cb) {\n  return this._authenticatedRequest({\n    path: '/sandbox/item/fire_webhook',\n    body: {\n      access_token: access_token,\n      webhook_code: webhook_code\n    }\n  }, cb, true);\n};\n\nmodule.exports = Client;","map":null,"metadata":{},"sourceType":"script"}